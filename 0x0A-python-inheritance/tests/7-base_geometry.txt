import unittest

class TestBaseGeometry(unittest.TestCase):
    def test_area_not_implemented(self):
        bg = BaseGeometry()
        with self.assertRaises(Exception) as context:
            bg.area()
        self.assertEqual(str(context.exception), "area() is not implemented")

    def test_integer_validator(self):
        bg = BaseGeometry()

        # Test valid integer
        try:
            bg.integer_validator("test_var", 42)
        except (TypeError, ValueError) as e:
            self.fail(f"integer_validator raised an unexpected exception: {e}")

        # Test non-integer value
        with self.assertRaises(TypeError) as context:
            bg.integer_validator("test_var", "not_an_integer")
        self.assertEqual(str(context.exception), "test_var must be an integer")

        # Test non-positive integer value
        with self.assertRaises(ValueError) as context:
            bg.integer_validator("test_var", -5)
        self.assertEqual(str(context.exception), "test_var must be greater than 0")

if __name__ == "__main__":
    unittest.main()
